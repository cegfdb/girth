<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GIRTH – Joint Maximum Likelihood Methods</title><link>https://eribean.github.io/girth/api/jml_methods/</link><description>Recent content in Joint Maximum Likelihood Methods on GIRTH</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 04 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://eribean.github.io/girth/api/jml_methods/index.xml" rel="self" type="application/rss+xml"/><item><title>Api: rasch_jml</title><link>https://eribean.github.io/girth/api/jml_methods/rasch_jml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eribean.github.io/girth/api/jml_methods/rasch_jml/</guid><description>
&lt;head>
&lt;link href='https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.0/normalize.min.css' rel='stylesheet'>
&lt;link href='https://cdnjs.cloudflare.com/ajax/libs/10up-sanitize.css/8.0.0/sanitize.min.css' rel='stylesheet'>
&lt;link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/github.min.css" rel="stylesheet">
&lt;style>.flex{display:flex !important}body{line-height:1.5em}#content{padding:20px}#sidebar{padding:30px;overflow:hidden}.http-server-breadcrumbs{font-size:130%;margin:0 0 15px 0}#footer{font-size:.75em;padding:5px 30px;border-top:1px solid #ddd;text-align:right}#footer p{margin:0 0 0 1em;display:inline-block}#footer p:last-child{margin-right:30px}h1,h2,h3,h4,h5{font-weight:300}h1{font-size:2.5em;line-height:1.1em}h2{font-size:1.75em;margin:1em 0 .50em 0}h3{font-size:1.4em;margin:25px 0 10px 0}h4{margin:0;font-size:105%}a{color:#058;text-decoration:none;transition:color .3s ease-in-out}a:hover{color:#e82}.title code{font-weight:bold}h2[id^="header-"]{margin-top:2em}.ident{color:#900}pre code{background:#f8f8f8;font-size:.8em;line-height:1.4em}code{background:#f2f2f1;padding:1px 4px;overflow-wrap:break-word}h1 code{background:transparent}pre{background:#f8f8f8;border:0;border-top:1px solid #ccc;border-bottom:1px solid #ccc;margin:1em 0;padding:1ex}#http-server-module-list{display:flex;flex-flow:column}#http-server-module-list div{display:flex}#http-server-module-list dt{min-width:10%}#http-server-module-list p{margin-top:0}.toc ul,#index{list-style-type:none;margin:0;padding:0}#index code{background:transparent}#index h3{border-bottom:1px solid #ddd}#index ul{padding:0}#index h4{font-weight:bold}#index h4 + ul{margin-bottom:.6em}@media (min-width:200ex){#index .two-column{column-count:2}}@media (min-width:300ex){#index .two-column{column-count:3}}dl{margin-bottom:2em}dl dl:last-child{margin-bottom:4em}dd{margin:0 0 1em 3em}#header-classes + dl > dd{margin-bottom:3em}dd dd{margin-left:2em}dd p{margin:10px 0}.name{background:#eee;font-weight:bold;font-size:.85em;padding:5px 10px;display:inline-block;min-width:40%}.name:hover{background:#e0e0e0}.name > span:first-child{white-space:nowrap}.name.class > span:nth-child(2){margin-left:.4em}.inherited{color:#999;border-left:5px solid #eee;padding-left:1em}.inheritance em{font-style:normal;font-weight:bold}.desc h2{font-weight:400;font-size:1.25em}.desc h3{font-size:1em}.desc dt code{background:inherit}.source summary,.git-link-div{color:#666;text-align:right;font-weight:400;font-size:.8em;text-transform:uppercase}.source summary > *{white-space:nowrap;cursor:pointer}.git-link{color:inherit;margin-left:1em}.source pre{max-height:500px;overflow:auto;margin:0}.source pre code{font-size:12px;overflow:visible}.hlist{list-style:none}.hlist li{display:inline}.hlist li:after{content:',2'}.hlist li:last-child:after{content:none}.hlist .hlist{display:inline;padding-left:1em}img{max-width:100%}.admonition{padding:.1em .5em;margin-bottom:1em}.admonition-title{font-weight:bold}.admonition.note,.admonition.info,.admonition.important{background:#aef}.admonition.todo,.admonition.versionadded,.admonition.tip,.admonition.hint{background:#dfd}.admonition.warning,.admonition.versionchanged,.admonition.deprecated{background:#fd4}.admonition.error,.admonition.danger,.admonition.caution{background:lightpink}&lt;/style>
&lt;style>code{color:#000}&lt;/style>
&lt;/head>
&lt;body>
&lt;section >
&lt;dl >
&lt;dt id="girth.jml_methods.rasch_jml" >&lt;code class="name flex" >
&lt;span >def &lt;span class="ident" >rasch_jml&lt;/span>&lt;/span>(&lt;span >dataset, discrimination=1, options=None)&lt;/span>
&lt;/code>&lt;/dt>
&lt;dd >
&lt;section class="desc" >&lt;p >Estimates difficulty parameters in an IRT model&lt;/p>
&lt;h2 id="args" >Args&lt;/h2>
&lt;dl >
&lt;dt >&lt;strong >&lt;code >dataset&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >[items x participants] matrix of True/False Values&lt;/dd>
&lt;dt >&lt;strong >&lt;code >discrimination&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >scalar of discrimination used in model (default to 1)&lt;/dd>
&lt;dt >&lt;strong >&lt;code >options&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >dictionary with updates to default options&lt;/dd>
&lt;/dl>
&lt;h2 id="returns" >Returns&lt;/h2>
&lt;dl >
&lt;dt >&lt;strong >&lt;code >difficulty&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >(1d array) estimates of item difficulties&lt;/dd>
&lt;/dl>
&lt;h2 id="options" >Options&lt;/h2>
&lt;ul >
&lt;li >max_iterations: int&lt;/li>
&lt;/ul>&lt;/section>
&lt;details class="source" >
&lt;summary >
&lt;span >Expand source code&lt;/span>
&lt;/summary>
&lt;pre >&lt;code class="python" >def rasch_jml(dataset, discrimination=1, options=None):
&amp;#34;&amp;#34;&amp;#34; Estimates difficulty parameters in an IRT model
Args:
dataset: [items x participants] matrix of True/False Values
discrimination: scalar of discrimination used in model (default to 1)
options: dictionary with updates to default options
Returns:
difficulty: (1d array) estimates of item difficulties
Options:
* max_iterations: int
&amp;#34;&amp;#34;&amp;#34;
options = validate_estimation_options(options)
# Defines item parameter update function
def _item_min_func(n_items, alphas, thetas,
betas, the_sign, counts):
# pylint: disable=cell-var-from-loop
for ndx in range(n_items):
scalar = alphas[0] * the_sign[ndx, :]
def _beta_min(beta):
otpt = 1.0 / (1.0 + np.exp(scalar *
(thetas - beta)))
return -np.log(otpt).dot(counts)
# Solves for the beta parameters
betas[ndx] = fminbound(_beta_min, -6, 6)
return alphas, betas
result = _jml_abstract(dataset, _item_min_func,
discrimination, options[&amp;#39;max_iteration&amp;#39;])
return result[1]&lt;/code>&lt;/pre>
&lt;/details>
&lt;/dd>
&lt;/dl>
&lt;/section>
&lt;footer id="footer">
&lt;p>Generated by &lt;a href="https://pdoc3.github.io/pdoc">&lt;cite>pdoc&lt;/cite> 0.7.5&lt;/a>.&lt;/p>
&lt;/footer>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js">&lt;/script>
&lt;script>hljs.initHighlightingOnLoad()&lt;/script>
&lt;/body></description></item><item><title>Api: onepl_jml</title><link>https://eribean.github.io/girth/api/jml_methods/onepl_jml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eribean.github.io/girth/api/jml_methods/onepl_jml/</guid><description>
&lt;head>
&lt;link href='https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.0/normalize.min.css' rel='stylesheet'>
&lt;link href='https://cdnjs.cloudflare.com/ajax/libs/10up-sanitize.css/8.0.0/sanitize.min.css' rel='stylesheet'>
&lt;link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/github.min.css" rel="stylesheet">
&lt;style>.flex{display:flex !important}body{line-height:1.5em}#content{padding:20px}#sidebar{padding:30px;overflow:hidden}.http-server-breadcrumbs{font-size:130%;margin:0 0 15px 0}#footer{font-size:.75em;padding:5px 30px;border-top:1px solid #ddd;text-align:right}#footer p{margin:0 0 0 1em;display:inline-block}#footer p:last-child{margin-right:30px}h1,h2,h3,h4,h5{font-weight:300}h1{font-size:2.5em;line-height:1.1em}h2{font-size:1.75em;margin:1em 0 .50em 0}h3{font-size:1.4em;margin:25px 0 10px 0}h4{margin:0;font-size:105%}a{color:#058;text-decoration:none;transition:color .3s ease-in-out}a:hover{color:#e82}.title code{font-weight:bold}h2[id^="header-"]{margin-top:2em}.ident{color:#900}pre code{background:#f8f8f8;font-size:.8em;line-height:1.4em}code{background:#f2f2f1;padding:1px 4px;overflow-wrap:break-word}h1 code{background:transparent}pre{background:#f8f8f8;border:0;border-top:1px solid #ccc;border-bottom:1px solid #ccc;margin:1em 0;padding:1ex}#http-server-module-list{display:flex;flex-flow:column}#http-server-module-list div{display:flex}#http-server-module-list dt{min-width:10%}#http-server-module-list p{margin-top:0}.toc ul,#index{list-style-type:none;margin:0;padding:0}#index code{background:transparent}#index h3{border-bottom:1px solid #ddd}#index ul{padding:0}#index h4{font-weight:bold}#index h4 + ul{margin-bottom:.6em}@media (min-width:200ex){#index .two-column{column-count:2}}@media (min-width:300ex){#index .two-column{column-count:3}}dl{margin-bottom:2em}dl dl:last-child{margin-bottom:4em}dd{margin:0 0 1em 3em}#header-classes + dl > dd{margin-bottom:3em}dd dd{margin-left:2em}dd p{margin:10px 0}.name{background:#eee;font-weight:bold;font-size:.85em;padding:5px 10px;display:inline-block;min-width:40%}.name:hover{background:#e0e0e0}.name > span:first-child{white-space:nowrap}.name.class > span:nth-child(2){margin-left:.4em}.inherited{color:#999;border-left:5px solid #eee;padding-left:1em}.inheritance em{font-style:normal;font-weight:bold}.desc h2{font-weight:400;font-size:1.25em}.desc h3{font-size:1em}.desc dt code{background:inherit}.source summary,.git-link-div{color:#666;text-align:right;font-weight:400;font-size:.8em;text-transform:uppercase}.source summary > *{white-space:nowrap;cursor:pointer}.git-link{color:inherit;margin-left:1em}.source pre{max-height:500px;overflow:auto;margin:0}.source pre code{font-size:12px;overflow:visible}.hlist{list-style:none}.hlist li{display:inline}.hlist li:after{content:',2'}.hlist li:last-child:after{content:none}.hlist .hlist{display:inline;padding-left:1em}img{max-width:100%}.admonition{padding:.1em .5em;margin-bottom:1em}.admonition-title{font-weight:bold}.admonition.note,.admonition.info,.admonition.important{background:#aef}.admonition.todo,.admonition.versionadded,.admonition.tip,.admonition.hint{background:#dfd}.admonition.warning,.admonition.versionchanged,.admonition.deprecated{background:#fd4}.admonition.error,.admonition.danger,.admonition.caution{background:lightpink}&lt;/style>
&lt;style>code{color:#000}&lt;/style>
&lt;/head>
&lt;body>
&lt;section >
&lt;dl >
&lt;dt id="girth.jml_methods.onepl_jml" >&lt;code class="name flex" >
&lt;span >def &lt;span class="ident" >onepl_jml&lt;/span>&lt;/span>(&lt;span >dataset, options=None)&lt;/span>
&lt;/code>&lt;/dt>
&lt;dd >
&lt;section class="desc" >&lt;p >Estimates parameters in an 1PL IRT Model.&lt;/p>
&lt;h2 id="args" >Args&lt;/h2>
&lt;dl >
&lt;dt >&lt;strong >&lt;code >dataset&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >[items x participants] matrix of True/False Values&lt;/dd>
&lt;dt >&lt;strong >&lt;code >options&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >dictionary with updates to default options&lt;/dd>
&lt;/dl>
&lt;h2 id="returns" >Returns&lt;/h2>
&lt;dl >
&lt;dt >&lt;strong >&lt;code >discrimination&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >(float) estimate of test discrimination&lt;/dd>
&lt;dt >&lt;strong >&lt;code >difficulty&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >(1d array) estimates of item diffiulties&lt;/dd>
&lt;/dl>
&lt;h2 id="options" >Options&lt;/h2>
&lt;ul >
&lt;li >max_iteration: int&lt;/li>
&lt;/ul>&lt;/section>
&lt;details class="source" >
&lt;summary >
&lt;span >Expand source code&lt;/span>
&lt;/summary>
&lt;pre >&lt;code class="python" >def onepl_jml(dataset, options=None):
&amp;#34;&amp;#34;&amp;#34; Estimates parameters in an 1PL IRT Model.
Args:
dataset: [items x participants] matrix of True/False Values
options: dictionary with updates to default options
Returns:
discrimination: (float) estimate of test discrimination
difficulty: (1d array) estimates of item diffiulties
Options:
* max_iteration: int
&amp;#34;&amp;#34;&amp;#34;
options = validate_estimation_options(options)
# Defines item parameter update function
def _item_min_func(n_items, alphas, thetas,
betas, the_sign, counts):
# pylint: disable=cell-var-from-loop
def _alpha_min(estimate):
# Initialize cost evaluation to zero
cost = 0
for ndx in range(n_items):
# pylint: disable=cell-var-from-loop
scalar = the_sign[ndx, :] * estimate
def _beta_min(beta):
otpt = 1.0 / (1.0 + np.exp(scalar *
(thetas - beta)))
return -np.log(otpt).dot(counts)
# Solves for the difficulty parameter for a given item at
# a specific discrimination parameter
betas[ndx] = fminbound(_beta_min, -6, 6)
cost += _beta_min(betas[ndx])
return cost
min_alpha = fminbound(_alpha_min, 0.25, 5)
alphas[:] = min_alpha
return alphas, betas
result = _jml_abstract(dataset, _item_min_func, discrimination=1,
max_iter=options[&amp;#39;max_iteration&amp;#39;])
return result[0][0], result[1]&lt;/code>&lt;/pre>
&lt;/details>
&lt;/dd>
&lt;/dl>
&lt;/section>
&lt;footer id="footer">
&lt;p>Generated by &lt;a href="https://pdoc3.github.io/pdoc">&lt;cite>pdoc&lt;/cite> 0.7.5&lt;/a>.&lt;/p>
&lt;/footer>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js">&lt;/script>
&lt;script>hljs.initHighlightingOnLoad()&lt;/script>
&lt;/body></description></item><item><title>Api: twopl_jml</title><link>https://eribean.github.io/girth/api/jml_methods/twopl_jml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eribean.github.io/girth/api/jml_methods/twopl_jml/</guid><description>
&lt;head>
&lt;link href='https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.0/normalize.min.css' rel='stylesheet'>
&lt;link href='https://cdnjs.cloudflare.com/ajax/libs/10up-sanitize.css/8.0.0/sanitize.min.css' rel='stylesheet'>
&lt;link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/github.min.css" rel="stylesheet">
&lt;style>.flex{display:flex !important}body{line-height:1.5em}#content{padding:20px}#sidebar{padding:30px;overflow:hidden}.http-server-breadcrumbs{font-size:130%;margin:0 0 15px 0}#footer{font-size:.75em;padding:5px 30px;border-top:1px solid #ddd;text-align:right}#footer p{margin:0 0 0 1em;display:inline-block}#footer p:last-child{margin-right:30px}h1,h2,h3,h4,h5{font-weight:300}h1{font-size:2.5em;line-height:1.1em}h2{font-size:1.75em;margin:1em 0 .50em 0}h3{font-size:1.4em;margin:25px 0 10px 0}h4{margin:0;font-size:105%}a{color:#058;text-decoration:none;transition:color .3s ease-in-out}a:hover{color:#e82}.title code{font-weight:bold}h2[id^="header-"]{margin-top:2em}.ident{color:#900}pre code{background:#f8f8f8;font-size:.8em;line-height:1.4em}code{background:#f2f2f1;padding:1px 4px;overflow-wrap:break-word}h1 code{background:transparent}pre{background:#f8f8f8;border:0;border-top:1px solid #ccc;border-bottom:1px solid #ccc;margin:1em 0;padding:1ex}#http-server-module-list{display:flex;flex-flow:column}#http-server-module-list div{display:flex}#http-server-module-list dt{min-width:10%}#http-server-module-list p{margin-top:0}.toc ul,#index{list-style-type:none;margin:0;padding:0}#index code{background:transparent}#index h3{border-bottom:1px solid #ddd}#index ul{padding:0}#index h4{font-weight:bold}#index h4 + ul{margin-bottom:.6em}@media (min-width:200ex){#index .two-column{column-count:2}}@media (min-width:300ex){#index .two-column{column-count:3}}dl{margin-bottom:2em}dl dl:last-child{margin-bottom:4em}dd{margin:0 0 1em 3em}#header-classes + dl > dd{margin-bottom:3em}dd dd{margin-left:2em}dd p{margin:10px 0}.name{background:#eee;font-weight:bold;font-size:.85em;padding:5px 10px;display:inline-block;min-width:40%}.name:hover{background:#e0e0e0}.name > span:first-child{white-space:nowrap}.name.class > span:nth-child(2){margin-left:.4em}.inherited{color:#999;border-left:5px solid #eee;padding-left:1em}.inheritance em{font-style:normal;font-weight:bold}.desc h2{font-weight:400;font-size:1.25em}.desc h3{font-size:1em}.desc dt code{background:inherit}.source summary,.git-link-div{color:#666;text-align:right;font-weight:400;font-size:.8em;text-transform:uppercase}.source summary > *{white-space:nowrap;cursor:pointer}.git-link{color:inherit;margin-left:1em}.source pre{max-height:500px;overflow:auto;margin:0}.source pre code{font-size:12px;overflow:visible}.hlist{list-style:none}.hlist li{display:inline}.hlist li:after{content:',2'}.hlist li:last-child:after{content:none}.hlist .hlist{display:inline;padding-left:1em}img{max-width:100%}.admonition{padding:.1em .5em;margin-bottom:1em}.admonition-title{font-weight:bold}.admonition.note,.admonition.info,.admonition.important{background:#aef}.admonition.todo,.admonition.versionadded,.admonition.tip,.admonition.hint{background:#dfd}.admonition.warning,.admonition.versionchanged,.admonition.deprecated{background:#fd4}.admonition.error,.admonition.danger,.admonition.caution{background:lightpink}&lt;/style>
&lt;style>code{color:#000}&lt;/style>
&lt;/head>
&lt;body>
&lt;section >
&lt;dl >
&lt;dt id="girth.jml_methods.twopl_jml" >&lt;code class="name flex" >
&lt;span >def &lt;span class="ident" >twopl_jml&lt;/span>&lt;/span>(&lt;span >dataset, options=None)&lt;/span>
&lt;/code>&lt;/dt>
&lt;dd >
&lt;section class="desc" >&lt;p >Estimates parameters in a 2PL IRT model.&lt;/p>
&lt;h2 id="args" >Args&lt;/h2>
&lt;dl >
&lt;dt >&lt;strong >&lt;code >dataset&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >[items x participants] matrix of True/False Values&lt;/dd>
&lt;dt >&lt;strong >&lt;code >options&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >dictionary with updates to default options&lt;/dd>
&lt;/dl>
&lt;h2 id="returns" >Returns&lt;/h2>
&lt;dl >
&lt;dt >&lt;strong >&lt;code >discrimination&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >(1d array) estimates of item discrimination&lt;/dd>
&lt;dt >&lt;strong >&lt;code >difficulty&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >(1d array) estimates of item difficulties&lt;/dd>
&lt;/dl>
&lt;h2 id="options" >Options&lt;/h2>
&lt;ul >
&lt;li >max_iteration: int&lt;/li>
&lt;/ul>&lt;/section>
&lt;details class="source" >
&lt;summary >
&lt;span >Expand source code&lt;/span>
&lt;/summary>
&lt;pre >&lt;code class="python" >def twopl_jml(dataset, options=None):
&amp;#34;&amp;#34;&amp;#34; Estimates parameters in a 2PL IRT model.
Args:
dataset: [items x participants] matrix of True/False Values
options: dictionary with updates to default options
Returns:
discrimination: (1d array) estimates of item discrimination
difficulty: (1d array) estimates of item difficulties
Options:
* max_iteration: int
&amp;#34;&amp;#34;&amp;#34;
options = validate_estimation_options(options)
# Defines item parameter update function
def _item_min_func(n_items, alphas, thetas,
betas, the_sign, counts):
# pylint: disable=cell-var-from-loop
for ndx in range(n_items):
def _alpha_beta_min(estimates):
otpt = 1.0 / (1.0 + np.exp((thetas - estimates[1]) *
the_sign[ndx, :] * estimates[0]))
return -np.log(otpt).dot(counts)
# Solves jointly for parameters using numerical derivatives
otpt = fmin_slsqp(_alpha_beta_min, (alphas[ndx], betas[ndx]),
bounds=[(0.25, 4), (-6, 6)], disp=False)
alphas[ndx], betas[ndx] = otpt
return alphas, betas
return _jml_abstract(dataset, _item_min_func, discrimination=1,
max_iter=options[&amp;#39;max_iteration&amp;#39;])&lt;/code>&lt;/pre>
&lt;/details>
&lt;/dd>
&lt;/dl>
&lt;/section>
&lt;footer id="footer">
&lt;p>Generated by &lt;a href="https://pdoc3.github.io/pdoc">&lt;cite>pdoc&lt;/cite> 0.7.5&lt;/a>.&lt;/p>
&lt;/footer>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js">&lt;/script>
&lt;script>hljs.initHighlightingOnLoad()&lt;/script>
&lt;/body></description></item><item><title>Api: grm_jml</title><link>https://eribean.github.io/girth/api/jml_methods/grm_jml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eribean.github.io/girth/api/jml_methods/grm_jml/</guid><description>
&lt;head>
&lt;link href='https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.0/normalize.min.css' rel='stylesheet'>
&lt;link href='https://cdnjs.cloudflare.com/ajax/libs/10up-sanitize.css/8.0.0/sanitize.min.css' rel='stylesheet'>
&lt;link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/github.min.css" rel="stylesheet">
&lt;style>.flex{display:flex !important}body{line-height:1.5em}#content{padding:20px}#sidebar{padding:30px;overflow:hidden}.http-server-breadcrumbs{font-size:130%;margin:0 0 15px 0}#footer{font-size:.75em;padding:5px 30px;border-top:1px solid #ddd;text-align:right}#footer p{margin:0 0 0 1em;display:inline-block}#footer p:last-child{margin-right:30px}h1,h2,h3,h4,h5{font-weight:300}h1{font-size:2.5em;line-height:1.1em}h2{font-size:1.75em;margin:1em 0 .50em 0}h3{font-size:1.4em;margin:25px 0 10px 0}h4{margin:0;font-size:105%}a{color:#058;text-decoration:none;transition:color .3s ease-in-out}a:hover{color:#e82}.title code{font-weight:bold}h2[id^="header-"]{margin-top:2em}.ident{color:#900}pre code{background:#f8f8f8;font-size:.8em;line-height:1.4em}code{background:#f2f2f1;padding:1px 4px;overflow-wrap:break-word}h1 code{background:transparent}pre{background:#f8f8f8;border:0;border-top:1px solid #ccc;border-bottom:1px solid #ccc;margin:1em 0;padding:1ex}#http-server-module-list{display:flex;flex-flow:column}#http-server-module-list div{display:flex}#http-server-module-list dt{min-width:10%}#http-server-module-list p{margin-top:0}.toc ul,#index{list-style-type:none;margin:0;padding:0}#index code{background:transparent}#index h3{border-bottom:1px solid #ddd}#index ul{padding:0}#index h4{font-weight:bold}#index h4 + ul{margin-bottom:.6em}@media (min-width:200ex){#index .two-column{column-count:2}}@media (min-width:300ex){#index .two-column{column-count:3}}dl{margin-bottom:2em}dl dl:last-child{margin-bottom:4em}dd{margin:0 0 1em 3em}#header-classes + dl > dd{margin-bottom:3em}dd dd{margin-left:2em}dd p{margin:10px 0}.name{background:#eee;font-weight:bold;font-size:.85em;padding:5px 10px;display:inline-block;min-width:40%}.name:hover{background:#e0e0e0}.name > span:first-child{white-space:nowrap}.name.class > span:nth-child(2){margin-left:.4em}.inherited{color:#999;border-left:5px solid #eee;padding-left:1em}.inheritance em{font-style:normal;font-weight:bold}.desc h2{font-weight:400;font-size:1.25em}.desc h3{font-size:1em}.desc dt code{background:inherit}.source summary,.git-link-div{color:#666;text-align:right;font-weight:400;font-size:.8em;text-transform:uppercase}.source summary > *{white-space:nowrap;cursor:pointer}.git-link{color:inherit;margin-left:1em}.source pre{max-height:500px;overflow:auto;margin:0}.source pre code{font-size:12px;overflow:visible}.hlist{list-style:none}.hlist li{display:inline}.hlist li:after{content:',2'}.hlist li:last-child:after{content:none}.hlist .hlist{display:inline;padding-left:1em}img{max-width:100%}.admonition{padding:.1em .5em;margin-bottom:1em}.admonition-title{font-weight:bold}.admonition.note,.admonition.info,.admonition.important{background:#aef}.admonition.todo,.admonition.versionadded,.admonition.tip,.admonition.hint{background:#dfd}.admonition.warning,.admonition.versionchanged,.admonition.deprecated{background:#fd4}.admonition.error,.admonition.danger,.admonition.caution{background:lightpink}&lt;/style>
&lt;style>code{color:#000}&lt;/style>
&lt;/head>
&lt;body>
&lt;section >
&lt;dl >
&lt;dt id="girth.jml_methods.grm_jml" >&lt;code class="name flex" >
&lt;span >def &lt;span class="ident" >grm_jml&lt;/span>&lt;/span>(&lt;span >dataset, options=None)&lt;/span>
&lt;/code>&lt;/dt>
&lt;dd >
&lt;section class="desc" >&lt;p >Estimate parameters for graded response model.&lt;/p>
&lt;p >Estimate the discrimination and difficulty parameters for
a graded response model using joint maximum likelihood.&lt;/p>
&lt;h2 id="args" >Args&lt;/h2>
&lt;dl >
&lt;dt >&lt;strong >&lt;code >dataset&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >[n_items, n_participants] 2d array of measured responses&lt;/dd>
&lt;dt >&lt;strong >&lt;code >options&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >dictionary with updates to default options&lt;/dd>
&lt;/dl>
&lt;h2 id="returns" >Returns&lt;/h2>
&lt;dl >
&lt;dt >&lt;strong >&lt;code >discrimination&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >(1d array) estimate of item discriminations&lt;/dd>
&lt;dt >&lt;strong >&lt;code >difficulty&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >(2d array) estimates of item diffiulties by item thresholds&lt;/dd>
&lt;/dl>
&lt;h2 id="options" >Options&lt;/h2>
&lt;ul >
&lt;li >max_iteration: int&lt;/li>
&lt;/ul>&lt;/section>
&lt;details class="source" >
&lt;summary >
&lt;span >Expand source code&lt;/span>
&lt;/summary>
&lt;pre >&lt;code class="python" >def grm_jml(dataset, options=None):
&amp;#34;&amp;#34;&amp;#34;Estimate parameters for graded response model.
Estimate the discrimination and difficulty parameters for
a graded response model using joint maximum likelihood.
Args:
dataset: [n_items, n_participants] 2d array of measured responses
options: dictionary with updates to default options
Returns:
discrimination: (1d array) estimate of item discriminations
difficulty: (2d array) estimates of item diffiulties by item thresholds
Options:
* max_iteration: int
&amp;#34;&amp;#34;&amp;#34;
options = validate_estimation_options(options)
responses, item_counts = condition_polytomous_response(dataset)
n_items, n_takers = responses.shape
# Set initial parameter estimates to default
thetas = np.zeros((n_takers,))
# Initialize difficulty parameters for iterations
betas = np.full((item_counts.sum(),), -10000.0)
discrimination = np.ones_like(betas)
cumulative_item_counts = item_counts.cumsum()
start_indices = np.roll(cumulative_item_counts, 1)
start_indices[0] = 0
for ndx in range(n_items):
end_ndx = cumulative_item_counts[ndx]
start_ndx = start_indices[ndx] + 1
betas[start_ndx:end_ndx] = np.linspace(-1, 1,
item_counts[ndx] - 1)
betas_roll = np.roll(betas, -1)
betas_roll[cumulative_item_counts-1] = 10000
for iteration in range(options[&amp;#39;max_iteration&amp;#39;]):
previous_betas = betas.copy()
#####################
# STEP 1
# Estimate theta, given betas / alpha
# Loops over all persons
#####################
for ndx in range(n_takers):
def _theta_min(theta):
# Solves for ability parameters (theta)
graded_prob = (irt_evaluation(betas, discrimination, theta) -
irt_evaluation(betas_roll, discrimination, theta))
values = graded_prob[responses[:, ndx]]
return -np.log(values).sum()
thetas[ndx] = fminbound(_theta_min, -6, 6)
# Recenter theta to identify model
thetas -= thetas.mean()
thetas /= thetas.std(ddof=1)
#####################
# STEP 2
# Estimate Betas / alpha, given Theta
# Loops over all items
#####################
for ndx in range(n_items):
# pylint: disable=cell-var-from-loop
# Compute ML for static items
start_ndx = start_indices[ndx]
end_ndx = cumulative_item_counts[ndx]
def _alpha_beta_min(estimates):
# Set the estimates int
discrimination[start_ndx:end_ndx] = estimates[0]
betas[start_ndx+1:end_ndx] = estimates[1:]
betas_roll[start_ndx:end_ndx-1] = estimates[1:]
graded_prob = (irt_evaluation(betas, discrimination, thetas) -
irt_evaluation(betas_roll, discrimination, thetas))
values = np.take_along_axis(
graded_prob, responses[None, ndx], axis=0)
np.clip(values, 1e-23, np.inf, out=values)
return -np.log(values).sum()
# Solves jointly for parameters using numerical derivatives
initial_guess = np.concatenate(([discrimination[start_ndx]],
betas[start_ndx+1:end_ndx]))
otpt = fmin_slsqp(_alpha_beta_min, initial_guess,
disp=False, f_ieqcons=_jml_inequality,
bounds=[(.25, 4)] + [(-6, 6)] * (item_counts[ndx]-1))
discrimination[start_ndx:end_ndx] = otpt[0]
betas[start_ndx+1:end_ndx] = otpt[1:]
betas_roll[start_ndx:end_ndx-1] = otpt[1:]
# Check termination criterion
if(np.abs(previous_betas - betas).max() &amp;lt; 1e-3):
break
# Trim difficulties to conform to standard output
# TODO: look where missing values are and place NAN there instead
# of appending them to the end
output_betas = np.full((n_items, item_counts.max()-1), np.nan)
for ndx, (start_ndx, end_ndx) in enumerate(zip(start_indices, cumulative_item_counts)):
output_betas[ndx, :end_ndx-start_ndx-1] = betas[start_ndx+1:end_ndx]
return discrimination[start_indices], output_betas&lt;/code>&lt;/pre>
&lt;/details>
&lt;/dd>
&lt;/dl>
&lt;/section>
&lt;footer id="footer">
&lt;p>Generated by &lt;a href="https://pdoc3.github.io/pdoc">&lt;cite>pdoc&lt;/cite> 0.7.5&lt;/a>.&lt;/p>
&lt;/footer>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js">&lt;/script>
&lt;script>hljs.initHighlightingOnLoad()&lt;/script>
&lt;/body></description></item><item><title>Api: pcm_jml</title><link>https://eribean.github.io/girth/api/jml_methods/pcm_jml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eribean.github.io/girth/api/jml_methods/pcm_jml/</guid><description>
&lt;head>
&lt;link href='https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.0/normalize.min.css' rel='stylesheet'>
&lt;link href='https://cdnjs.cloudflare.com/ajax/libs/10up-sanitize.css/8.0.0/sanitize.min.css' rel='stylesheet'>
&lt;link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/github.min.css" rel="stylesheet">
&lt;style>.flex{display:flex !important}body{line-height:1.5em}#content{padding:20px}#sidebar{padding:30px;overflow:hidden}.http-server-breadcrumbs{font-size:130%;margin:0 0 15px 0}#footer{font-size:.75em;padding:5px 30px;border-top:1px solid #ddd;text-align:right}#footer p{margin:0 0 0 1em;display:inline-block}#footer p:last-child{margin-right:30px}h1,h2,h3,h4,h5{font-weight:300}h1{font-size:2.5em;line-height:1.1em}h2{font-size:1.75em;margin:1em 0 .50em 0}h3{font-size:1.4em;margin:25px 0 10px 0}h4{margin:0;font-size:105%}a{color:#058;text-decoration:none;transition:color .3s ease-in-out}a:hover{color:#e82}.title code{font-weight:bold}h2[id^="header-"]{margin-top:2em}.ident{color:#900}pre code{background:#f8f8f8;font-size:.8em;line-height:1.4em}code{background:#f2f2f1;padding:1px 4px;overflow-wrap:break-word}h1 code{background:transparent}pre{background:#f8f8f8;border:0;border-top:1px solid #ccc;border-bottom:1px solid #ccc;margin:1em 0;padding:1ex}#http-server-module-list{display:flex;flex-flow:column}#http-server-module-list div{display:flex}#http-server-module-list dt{min-width:10%}#http-server-module-list p{margin-top:0}.toc ul,#index{list-style-type:none;margin:0;padding:0}#index code{background:transparent}#index h3{border-bottom:1px solid #ddd}#index ul{padding:0}#index h4{font-weight:bold}#index h4 + ul{margin-bottom:.6em}@media (min-width:200ex){#index .two-column{column-count:2}}@media (min-width:300ex){#index .two-column{column-count:3}}dl{margin-bottom:2em}dl dl:last-child{margin-bottom:4em}dd{margin:0 0 1em 3em}#header-classes + dl > dd{margin-bottom:3em}dd dd{margin-left:2em}dd p{margin:10px 0}.name{background:#eee;font-weight:bold;font-size:.85em;padding:5px 10px;display:inline-block;min-width:40%}.name:hover{background:#e0e0e0}.name > span:first-child{white-space:nowrap}.name.class > span:nth-child(2){margin-left:.4em}.inherited{color:#999;border-left:5px solid #eee;padding-left:1em}.inheritance em{font-style:normal;font-weight:bold}.desc h2{font-weight:400;font-size:1.25em}.desc h3{font-size:1em}.desc dt code{background:inherit}.source summary,.git-link-div{color:#666;text-align:right;font-weight:400;font-size:.8em;text-transform:uppercase}.source summary > *{white-space:nowrap;cursor:pointer}.git-link{color:inherit;margin-left:1em}.source pre{max-height:500px;overflow:auto;margin:0}.source pre code{font-size:12px;overflow:visible}.hlist{list-style:none}.hlist li{display:inline}.hlist li:after{content:',2'}.hlist li:last-child:after{content:none}.hlist .hlist{display:inline;padding-left:1em}img{max-width:100%}.admonition{padding:.1em .5em;margin-bottom:1em}.admonition-title{font-weight:bold}.admonition.note,.admonition.info,.admonition.important{background:#aef}.admonition.todo,.admonition.versionadded,.admonition.tip,.admonition.hint{background:#dfd}.admonition.warning,.admonition.versionchanged,.admonition.deprecated{background:#fd4}.admonition.error,.admonition.danger,.admonition.caution{background:lightpink}&lt;/style>
&lt;style>code{color:#000}&lt;/style>
&lt;/head>
&lt;body>
&lt;section >
&lt;dl >
&lt;dt id="girth.jml_methods.pcm_jml" >&lt;code class="name flex" >
&lt;span >def &lt;span class="ident" >pcm_jml&lt;/span>&lt;/span>(&lt;span >dataset, options=None)&lt;/span>
&lt;/code>&lt;/dt>
&lt;dd >
&lt;section class="desc" >&lt;p >Estimate parameters for partial credit model.&lt;/p>
&lt;p >Estimate the discrimination and difficulty parameters for
the partial credit model using joint maximum likelihood.&lt;/p>
&lt;h2 id="args" >Args&lt;/h2>
&lt;dl >
&lt;dt >&lt;strong >&lt;code >dataset&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >[n_items, n_participants] 2d array of measured responses&lt;/dd>
&lt;dt >&lt;strong >&lt;code >options&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >dictionary with updates to default options&lt;/dd>
&lt;/dl>
&lt;h2 id="returns" >Returns&lt;/h2>
&lt;dl >
&lt;dt >&lt;strong >&lt;code >discrimination&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >(1d array) estimates of item discrimination&lt;/dd>
&lt;dt >&lt;strong >&lt;code >difficulty&lt;/code>&lt;/strong>&lt;/dt>
&lt;dd >(2d array) estimates of item difficulties x item thresholds&lt;/dd>
&lt;/dl>
&lt;h2 id="options" >Options&lt;/h2>
&lt;ul >
&lt;li >max_iteration: int&lt;/li>
&lt;/ul>&lt;/section>
&lt;details class="source" >
&lt;summary >
&lt;span >Expand source code&lt;/span>
&lt;/summary>
&lt;pre >&lt;code class="python" >def pcm_jml(dataset, options=None):
&amp;#34;&amp;#34;&amp;#34;Estimate parameters for partial credit model.
Estimate the discrimination and difficulty parameters for
the partial credit model using joint maximum likelihood.
Args:
dataset: [n_items, n_participants] 2d array of measured responses
options: dictionary with updates to default options
Returns:
discrimination: (1d array) estimates of item discrimination
difficulty: (2d array) estimates of item difficulties x item thresholds
Options:
* max_iteration: int
&amp;#34;&amp;#34;&amp;#34;
options = validate_estimation_options(options)
responses, item_counts = condition_polytomous_response(
dataset, _reference=0.0)
n_items, n_takers = responses.shape
# Set initial parameter estimates to default
thetas = np.zeros((n_takers,))
# Initialize item parameters for iterations
discrimination = np.ones((n_items,))
betas = np.full((n_items, item_counts.max() - 1), np.nan)
scratch = np.zeros((n_items, betas.shape[1] + 1))
for ndx in range(n_items):
item_length = item_counts[ndx] - 1
betas[ndx, :item_length] = np.linspace(-1, 1, item_length)
for iteration in range(options[&amp;#39;max_iteration&amp;#39;]):
previous_discrimination = discrimination.copy()
#####################
# STEP 1
# Estimate theta, given betas / alpha
# Loops over all persons
#####################
for ndx in range(n_takers):
# pylint: disable=cell-var-from-loop
response_set = responses[:, ndx]
def _theta_min(theta, scratch):
# Solves for ability parameters (theta)
# Graded PCM Model
scratch *= 0.
scratch[:, 1:] = theta - betas
scratch *= discrimination[:, None]
np.cumsum(scratch, axis=1, out=scratch)
np.exp(scratch, out=scratch)
scratch /= np.nansum(scratch, axis=1)[:, None]
# Probability associated with response
values = np.take_along_axis(
scratch, response_set[:, None], axis=1)
return -np.log(values + 1e-23).sum()
thetas[ndx] = fminbound(_theta_min, -6, 6, args=(scratch,))
# Recenter theta to identify model
thetas -= thetas.mean()
thetas /= thetas.std(ddof=1)
#####################
# STEP 2
# Estimate Betas / alpha, given Theta
# Loops over all items
#####################
for ndx in range(n_items):
# pylint: disable=cell-var-from-loop
# Compute ML for static items
response_set = responses[ndx]
def _alpha_beta_min(estimates):
# PCM_Model
kernel = thetas[:, None] - estimates[None, :]
kernel *= estimates[0]
kernel[:, 0] = 0
np.cumsum(kernel, axis=1, out=kernel)
np.exp(kernel, out=kernel)
kernel /= np.nansum(kernel, axis=1)[:, None]
# Probability associated with response
values = np.take_along_axis(
kernel, response_set[:, None], axis=1)
return -np.log(values).sum()
# Solves jointly for parameters using numerical derivatives
initial_guess = np.concatenate(([discrimination[ndx]],
betas[ndx, :item_counts[ndx]-1]))
otpt = fmin_slsqp(_alpha_beta_min, initial_guess,
disp=False,
bounds=[(.25, 4)] + [(-6, 6)] * (item_counts[ndx]-1))
discrimination[ndx] = otpt[0]
betas[ndx, :item_counts[ndx]-1] = otpt[1:]
# Check termination criterion
if(np.abs(previous_discrimination - discrimination).max() &amp;lt; 1e-3):
break
return discrimination, betas&lt;/code>&lt;/pre>
&lt;/details>
&lt;/dd>
&lt;/dl>
&lt;/section>
&lt;footer id="footer">
&lt;p>Generated by &lt;a href="https://pdoc3.github.io/pdoc">&lt;cite>pdoc&lt;/cite> 0.7.5&lt;/a>.&lt;/p>
&lt;/footer>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js">&lt;/script>
&lt;script>hljs.initHighlightingOnLoad()&lt;/script>
&lt;/body></description></item></channel></rss>